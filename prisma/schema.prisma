// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  name          String?
  image         String?
  timezone      String    @default("Asia/Singapore")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  subscriptions Subscription[]
  alerts        Alert[]
  integrations  Integration[]
  deliveries    Delivery[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subscription {
  id               String   @id @default(cuid())
  userId           String
  plan             String   // free, pro, etc.
  status           String   // active, trialing, canceled
  currentPeriodEnd DateTime
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id])
}

model Alert {
  id           String   @id @default(cuid())
  userId       String
  name         String
  channel      String   // "whatsapp"
  to           String   // full WhatsApp number in E.164
  scheduleCron String?  // e.g., "CRON_TZ=Asia/Singapore 30 9 * * 1-5"
  nextRunAt    DateTime?
  template     Json     // message template
  enabled      Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
  deliveries   Delivery[]
}

model Delivery {
  id        String   @id @default(cuid())
  alertId   String?
  userId    String
  channel   String   // whatsapp, email (future)
  payload   Json
  status    String   // queued, sent, delivered, failed
  error     String?
  createdAt DateTime @default(now())
  alert     Alert?   @relation(fields: [alertId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Integration {
  id            String   @id @default(cuid())
  userId        String
  type          String   // "gmail"
  labelFilter   String?  // "INBOX" or a Gmail label id
  importance    String?  // "important-only" | "all"
  lastHistoryId String?  // for incremental sync later
  enabled       Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
  
  @@unique([userId, type])
}